" 禁用 vi 兼容模式
set nocompatible

if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

""""""""""""""""""""
"*****Vim-plug*****"
""""""""""""""""""""
"if exists('g:has_vundle')
  call plug#begin('~/.vim/bundle')

  " 插件管理工具
  Plug 'junegunn/vim-plug'
  " 显示 scons高亮
  Plug 'vim-scripts/scons.vim', { 'for': 'scons' }
  " 显示 nginx配置高亮
  Plug 'chr4/nginx.vim', { 'for': 'nginx' }
  " 显示 json高亮
  Plug 'elzr/vim-json', { 'for': 'json' }
  " 显示 c++语法高亮
  Plug 'octol/vim-cpp-enhanced-highlight', { 'for': ['c', 'cpp'] }
  " 补全 tags生成
  Plug 'ludovicchabant/vim-gutentags', { 'for': ['c', 'cpp'] }
  " 补全
  Plug 'valloric/youcompleteme', { 'for': ['c', 'cpp'] }
  " 头文件/源文件切换
  Plug 'vim-scripts/a.vim', { 'on': 'A', 'for': ['c', 'cpp'] }
  " 搜索
  Plug 'Yggdroot/LeaderF', { 'on': ['LeaderfFunction', 'LeaderfFile', 'LeaderfMru'] }
  " 文件列表
  Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
  " 文件列表 git状态
  Plug 'Xuyuanp/nerdtree-git-plugin', { 'on': 'NERDTreeToggle' }
  " 搜索
  Plug 'rking/ag.vim', { 'on': 'Ag' }
  " 显示 底部状态
  Plug 'bling/vim-airline'
  " 显示 底部状态
  Plug 'vim-airline/vim-airline-themes'
  " 显示 主题
  Plug 'flazz/vim-colorschemes'
  " 显示 文件中行单位git修改状态
  Plug 'mhinz/vim-signify'
  " 显示 启动vim时显示MRU列表
  Plug 'mhinz/vim-startify'
  " 输入 注释相关
  Plug 'scrooloose/nerdcommenter'
  " 缩进对齐相关
  Plug 'nathanaelkane/vim-indent-guides'
  " 高亮 尾部空格
  Plug 'ntpeters/vim-better-whitespace'
  " 复制相关
  Plug 'ConradIrwin/vim-bracketed-paste'
  " 括号补全
  Plug 'jiangmiao/auto-pairs'
  " 搜索
  "Plug 'kien/ctrlp.vim'
  " 显示 语法检查
  "Plug 'w0rp/ale'
  "Plug 'Vundle.vim'
  "Plug 'tenfyzhong/CompleteParameter.vim'
  "Plug 'rizzatti/dash.vim'
  "Plug 'terryma/vim-smooth-scroll'
  "Plug 'majutsushi/tagbar'
  "Plug 'scrooloose/syntastic'
  "Plug 'vim-scripts/indentpython.vim'
  "Plug 'nvie/vim-flake8'
  "Plug 'myusuf3/numbers.vim'
  "Plug 'Cpp11-Syntax-Support'
  "Plug 'fatih/vim-go'
  "Plug 'mizuchi/stl-syntax'
  "Plug 'Shougo/neocomplete'
  "Plug 'stanangeloff/php.vim'
  "Plug 'shawncplus/phpcomplete.vim'
  "Plug 'taglist.vim'

  "call vundle#end()
  call plug#end()

  """""""""""""""""""""
  "*****LeaderF*****"
  """""""""""""""""""""
  let g:Lf_RootMarkers = ['.git', '.root']
  let g:Lf_WorkingDirectoryMode = 'A'

  """""""""""""""""""""
  "*****scons.vim*****"
  """""""""""""""""""""
  au BufNewFile,BufRead SCons* set filetype=scons

  """""""""""""""
  "*****ale*****"
  """""""""""""""
  "let g:ale_linters_explicit = 1
  let g:ale_completion_delay = 500
  let g:ale_echo_delay = 20
  let g:ale_lint_delay = 1000
  let g:ale_echo_msg_format = '[%linter%] %code: %%s'
  let g:ale_lint_on_text_changed = 'never'
  "let g:ale_lint_on_insert_leave = 1
  let g:airline#extensions#ale#enabled = 1
  let g:ale_c_gcc_options = '-Wall -O2 -std=c99'
  let g:ale_cpp_gcc_options = '-Wall -O2 -std=c++14'
  let g:ale_c_cppcheck_options = ''
  let g:ale_cpp_cppcheck_options = ''
  "let g:ale_sign_error = "\ue009\ue009"
  hi! clear SpellBad
  hi! clear SpellCap
  hi! clear SpellRare
  hi! SpellBad gui=undercurl guisp=red
  hi! SpellCap gui=undercurl guisp=blue
  hi! SpellRare gui=undercurl guisp=magenta

  """""""""""""""""""""""""
  "*****vim-gutentags*****"
  """""""""""""""""""""""""
  "更新ctags $brew install --HEAD universal-ctags/universal-ctags/universal-ctags
  " gutentags 搜索工程目录的标志，碰到这些文件/目录名就停止向上一级目录递归
  let g:gutentags_project_root = ['.root', '.svn', '.git', '.hg', '.project', '.ycm_extra_conf.py']
  " 所生成的数据文件的名称
  let g:gutentags_ctags_tagfile = '.tags'
  " 将自动生成的 tags 文件全部放入 ~/.cache/tags 目录中，避免污染工程目录
  let s:vim_tags = expand('~/.cache/tags')
  let g:gutentags_cache_dir = s:vim_tags
  " 配置 ctags 的参数
  let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extra=+q']
  let g:gutentags_ctags_extra_args += ['--c++-kinds=+px']
  let g:gutentags_ctags_extra_args += ['--c-kinds=+px']
  let g:gutentags_ctags_extra_args += ['--output-format=e-ctags']
  " 检测 ~/.cache/tags 不存在就新建
  if !isdirectory(s:vim_tags)
     silent! call mkdir(s:vim_tags, 'p')
  endif

  """"""""""""""""""""""""""""""""""
  "*****flazz/vim-colorschemes*****"
  """"""""""""""""""""""""""""""""""
  "T0: gruvbox
  "T1: onedark hybrid jellybeans lucius
  "白底的: tomorrow
  "搜索高亮不明显: flatcolor zeburn
  "不常用的: molokai solarized desert
  colorscheme lucius
  "set background=dark

  """"""""""""""""""""""""
  "*****rking/ag.vim*****"
  """"""""""""""""""""""""
  set runtimepath^=~/.vim/bundle/ag.vim
  let g:ag_highlight=1

  """""""""""""""""""""""""""""
  "*****bling/vim-airline*****"
  """""""""""""""""""""""""""""
  "不设置主题的话,则主题跟随colorscheme变化
  "let g:airline_theme="molokai"
  let g:airline_powerline_fonts                   = 1
  let g:airline#extensions#tabline#enabled        = 1
  let g:airline#extensions#tabline#buffer_nr_show = 1
  "let g:airline#extensions#whitespace#enabled = 1

  """"""""""""""""""""""""""""""""""""""""""""
  "*****octol/vim-cpp-enhanced-highlight*****"
  """"""""""""""""""""""""""""""""""""""""""""
  let g:cpp_class_scope_highlight           = 1
  let g:cpp_experimental_template_highlight = 1
  let g:cpp_concepts_highlight              = 1
  let c_no_curly_error                      = 1

  """""""""""""""""""""""""""""
  "*****mhinz/vim-signify*****"
  """""""""""""""""""""""""""""
  let g:signify_vcs_list = [ 'git' ]

  """"""""""""""""""""""""""""""""""""""""""
  "*****ntpeters/vim-better-whitespace*****"
  """"""""""""""""""""""""""""""""""""""""""
  autocmd BufWritePre * StripWhitespace

  """""""""""""""""""""""""""""""
  "*****scrooloose/nerdtree*****"
  """""""""""""""""""""""""""""""
  autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
  let NERDTreeShowHidden       = 1
  let NERDTreeIgnore           = ['\.pyc$', '.DS_Store', '.sconsign.dblite', '.svn', '\.o$']
  let NERDTreeWinSize          = 32
  "let NERDTreeMinimalUI        = 1
  let NERDTreeAutoDeleteBuffer = 1
  "autocmd vimenter * NERDTree


  """""""""""""""""""""""""""""""""""""""""""
  "*****nathanaelkane/vim-indent-guides*****"
  """""""""""""""""""""""""""""""""""""""""""
  "let g:indent_guides_enable_on_vim_startup = 1
  let g:indent_guides_guide_size            = 1
  let g:indent_guides_start_level           = 2

  """"""""""""""""""""""""""""""""""""
  "*****scrooloose/nerdcommenter*****"
  """"""""""""""""""""""""""""""""""""
  let g:NERDSpaceDelims            = 1
  let g:NERDCompactSexyComs        = 1
  let g:NERDDefaultAlign           = 'left'
  let g:NERDAltDelims_java         = 1
  let g:NERDCommentEmptyLines      = 1
  let g:NERDTrimTrailingWhitespace = 1

  """"""""""""""""""""""""""""""""""
  "*****valloric/youcompleteme*****"
  """"""""""""""""""""""""""""""""""
  "let g:ycm_min_num_of_chars_for_completion = 1
  "let g:ycm_min_num_identifier_candidate_chars = 2
  "let g:ycm_complete_in_comments = 1
  "let g:ycm_seed_identifiers_with_syntax = 1
  "let g:ycm_cache_omnifunc = 0
  "let g:ycm_collect_identifiers_from_comments_and_strings = 1
  "let g:ycm_complete_in_strings = 1
  let g:ycm_server_log_level = 'warning'
  let g:ycm_confirm_extra_conf = 1
  let g:ycm_show_diagnostics_ui = 0
  let g:ycm_add_preview_to_completeopt = 0
  let g:ycm_autoclose_preview_window_after_completion = 1
  "let g:ycm_semantic_triggers =  {
  "         \ 'c,cpp,python,java,go,erlang,perl': ['re!\w{2}'],
  "         \ 'cs,lua,javascript': ['re!\w{2}'],
  "         \ }
  set completeopt=menu,menuone

  """"""""""""""""""""""""""""""""""
  "*****nvie/vim-flake8*****"
  """"""""""""""""""""""""""""""""""
  "let python_highlight_all=1

  """"""""""""""""""""""""
  "*****fatih/vim-go*****"
  """"""""""""""""""""""""
  "let g:go_highlight_functions         = 1
  "let g:go_highlight_methods           = 1
  "let g:go_highlight_structs           = 1
  "let g:go_highlight_interfaces        = 1
  "let g:go_highlight_operators         = 1
  "let g:go_highlight_build_constraints = 1
  "let g:go_fmt_command                 = "goimports"

  """"""""""""""""""""""""""""""
  "*****Shougo/neocomplete*****"
  """"""""""""""""""""""""""""""
  "let g:neocomplete#enable_at_startup = 1

  """"""""""""""""""""""""""""""""""""""
  "*****shawncplus/phpcomplete.vim*****"
  """"""""""""""""""""""""""""""""""""""
  "let g:phpcomplete_relax_static_constraint      = 1
  "let g:phpcomplete_complete_for_unknown_classes = 1
  "let g:phpcomplete_search_tags_for_variables    = 1
  "let g:phpcomplete_parse_docblock_comments      = 1

  """"""""""""""""""""""""""""""""
  "*****stanangeloff/php.vim*****"
  """"""""""""""""""""""""""""""""
  "let g:php_syntax_extensions_enabled = 1
  ""let b:php_syntax_extensions_enabled = 1
  "function! PhpSyntaxOverride()
  "    hi! def link phpDocTags  phpDefine
  "    hi! def link phpDocParam phpType
  "endfunction
  "augroup phpSyntaxOverride
  "    autocmd!
  "    autocmd FileType php call PhpSyntaxOverride()
  "augroup END

  """"""""""""""""""""""""""""""""
  "*****jiangmiao/auto-pairs*****"
  """"""""""""""""""""""""""""""""
  "let g:AutoPairs = {'(':')', '[':']', '{':'}',"'":"'",'"':'"', '`':'`', '<':'>'}
  "au Filetype FILETYPE let b:AutoPairs = {"(": ")"}
  "let g:AutoPairs = {'[':']', '{':'}',"'":"'",'"':'"', '`':'`'}
  "inoremap <buffer><silent> ) <C-R>=AutoPairsInsert(')')<CR>

  """""""""""""""""""""""""""""
  "*****majutsushi/tagbar*****"
  """""""""""""""""""""""""""""
  "let tarbar_width=32
  "let g:tagbar_compact=1
  "      "\ 'l:local:0:1',
  "let g:tagbar_type_cpp = {
  "  \ 'kinds' : [
  "      \ 'c:classes:0:1',
  "      \ 'd:macros:0:1',
  "      \ 'e:enumerators:0:0',
  "      \ 'f:functions:0:1',
  "      \ 'g:enumeration:0:1',
  "      \ 'm:members:0:1',
  "      \ 'n:namespaces:0:1',
  "      \ 'p:functions_prototypes:0:1',
  "      \ 's:structs:0:1',
  "      \ 't:typedefs:0:1',
  "      \ 'u:unions:0:1',
  "      \ 'v:global:0:1',
  "      \ 'x:external:0:1'
  "  \ ],
  "  \ 'sro'        : '::',
  "  \ 'kind2scope' : {
  "      \ 'g' : 'enum',
  "      \ 'n' : 'namespace',
  "      \ 'c' : 'class',
  "      \ 's' : 'struct',
  "      \ 'u' : 'union'
  "  \ },
  "  \ 'scope2kind' : {
  "      \ 'enum'      : 'g',
  "      \ 'namespace' : 'n',
  "      \ 'class'     : 'c',
  "      \ 'struct'    : 's',
  "      \ 'union'     : 'u'
  "  \ }
  "\ }

  """""""""""""""""
  "*****ctrlp*****"
  """""""""""""""""
  "let g:ctrlp_show_hidden=1

  """""""""""""""""""""""
  "*****taglist.vim*****"
  """""""""""""""""""""""
  "let Tlist_Show_One_File           = 1
  "let Tlist_Exit_OnlyWindow         = 1
  "let Tlist_Use_Right_Window        = 1
  "let Tlist_GainFocus_On_ToggleOpen = 1

  """"""""""""""""""""""""""""""""
  "*****scrooloose/syntastic*****"
  """"""""""""""""""""""""""""""""
  "set statusline+=%#warningmsg#
  "set statusline+=%{SyntasticStatuslineFlag()}
  "set statusline+=%*
  "let g:syntastic_check_on_wq          = 1
  "let g:syntastic_cpp_compiler         = 'g++'
  "let g:syntastic_cpp_compiler_options = ' -std=c++11 -stdlib=libc++'
  "let g:syntastic_check_on_open            = 1
  "let g:syntastic_always_populate_loc_list = 1
  "let g:syntastic_auto_loc_list            = 1

"endif "exists('g:has_vundle')

"""""""""""""""""""
"*****mapping*****"
"""""""""""""""""""
let mapleader=";"
" 文件列表
nnoremap <silent> <F2>    :NERDTreeToggle<CR>
" 函数列表
"nnoremap <silent> <F3>    :TagbarToggle<CR>
nnoremap <silent> <F3>    :LeaderfFunction!<CR>
" 源文件/头文件切换
nnoremap <silent> <F4>    :A<CR>
" 文件查找
nnoremap <silent> <F5>    :LeaderfFile<CR>
" 快速查找光标所在当前单词
nnoremap <silent> <F6>    :Ag '<cword>' .<CR>
" 最近打开文件列表
nnoremap <silent> <F7>    :LeaderfMru<CR>
" 上一个buffer
nnoremap <silent> <leader>h :bp<CR>
" 下一个buffer
nnoremap <silent> <leader>l :bn<CR>
" 跳转到函数定义处
autocmd FileType python
    \ map <C-]> :YcmCompleter GoToDefinitionElseDeclaration<CR>
" 禁用上下左右按键
map <Left>  <Nop>
map <Right> <Nop>
map <Up>    <Nop>
map <Down>  <Nop>

" tenfyzhong/CompleteParameter.vim
"inoremap <silent><expr> ( complete_parameter#pre_complete("()")
"smap <c-j> <Plug>(complete_parameter#goto_next_parameter)
"imap <c-j> <Plug>(complete_parameter#goto_next_parameter)
"smap <c-k> <Plug>(complete_parameter#goto_previous_parameter)
"imap <c-k> <Plug>(complete_parameter#goto_previous_parameter)

"跳转相关
"g]
"ctrl+]
"ctrl+i
"ctrl+o
"buffer列表
":ls
"查找
"Ag xxx .

" CHEFCONFIGME

" 命令补全
set wildmenu
set history=1000

" j,k上下移动至顶部、尾部时预留3行
set scrolloff=7
set sidescrolloff=5

set wildignore=*/.git/*,*/.svn/*,*/.tags,*/*.o,*/.vscode/*

" 设置 Backspace 键模式
set bs=eol,start,indent

" 自动缩进
set autoindent

" 打开 c/c++ 语言缩进优化
set cindent

" 关闭自动换行
set nowrap

" 搜索忽略大小写
set ignorecase
" 智能搜索大小写判断,默认忽略大小写,除非搜索内容包含大写字母
set smartcase
" 一边输入一边搜索
set incsearch
" 高亮搜索
set hlsearch

" 内部工作编码
set encoding=utf-8
" 文件默认编码
set fileencoding=utf-8
" 打开文件时自动尝试下面顺序的编码
set fileencodings=utf-8,gb18030,gbk,ucs-bom,big5,euc-jp,latin1

" 允许根据文件类型自动设置缩进等
filetype plugin indent on

" 语法高亮
syntax enable
syntax on

" 显示匹配的括号
set showmatch
" 显示括号匹配的时间
set matchtime=2

" 显示最后一行
set display+=lastline

" 懒重绘
set lazyredraw

" 错误格式
set errorformat+=[%f:%l]\ ->\ %m,[%f:%l]:%m

" 设置分隔符可见
set listchars=tab:›\ ,trail:•,extends:#,nbsp:.,precedes:<

" 设置.tags文件向上搜索方式
set tags=./.tags;,.tags

" 如遇Unicode值大于255的文本,不必等到空格再折行
set formatoptions+=m

" 合并两行中文时,不在中间加空格
set formatoptions+=B

" 文件换行符,默认使用 unix 换行符
set fileformat=unix
set fileformats=unix,dos,mac

" 关闭代码折叠
set foldmethod=syntax
set nofoldenable

""""""""""""""""""
"*****global*****"
""""""""""""""""""
set confirm
autocmd BufEnter * sign define dummy
autocmd BufEnter * execute 'sign place 9999 line=1 name=dummy buffer=' . bufnr('')
set list
if has('cmdline_info')
  set ruler
  set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%)
  set showcmd
endif
if has('statusline')
    set laststatus=2

    " Broken down into easily includeable segments
    set statusline=%<%f\                     " Filename
    set statusline+=%w%h%m%r                 " Options
    "set statusline+=%{fugitive#statusline()} " Git Hotness
    set statusline+=\ [%{&ff}/%Y]            " Filetype
    set statusline+=\ [%{getcwd()}]          " Current dir
    set statusline+=%=%-14.(%l,%c%V%)\ %p%%  " Right aligned file nav info
endif

set hidden    " Allow buffer switching without saving
set ttyfast
set wrapscan
set report=0
set synmaxcol=200

""" 打开文件跳转到最后修改处
if has("autocmd")
    au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

""" 重定向讨厌的*.swp等文件
if empty(glob('~/.vim'))
    silent !mkdir ~/.vim
endif
if empty(glob('~/.vim/backup'))
    silent !mkdir ~/.vim/backup
endif
if empty(glob('~/.vim/swap'))
    silent !mkdir ~/.vim/swap
endif
if empty(glob('~/.vim/undo'))
    silent !mkdir ~/.vim/undo
endif
if empty(glob('~/.vim/viminfo'))
    silent !mkdir ~/.vim/viminfo
endif
set backup
set backupdir=~/.vim/backup//
set backupext=-vimbackup
set backupskip=
set directory=~/.vim/swap//
set updatecount=100
set undofile
set undodir=~/.vim/undo//
set viminfo='100,n$HOME/.vim/viminfo'

""" 非INSERT模式时高亮显示光标所在行
set cursorline
autocmd InsertEnter * :set nocursorline
autocmd InsertLeave * :set cursorline

""" 行号
set nu
""" 显示换行格挡符
set cc=120
"set tw=120

""" 对齐
set expandtab
set tabstop=2
set shiftwidth=2
set softtabstop=2

autocmd FileType python set tabstop=4
autocmd FileType python set softtabstop=4
autocmd FileType python set shiftwidth=4
autocmd FileType python set cc=80
autocmd FileType python set expandtab
autocmd FileType python set fileformat=unix

""" 切换当前目录
set autochdir
""" 退格键模式
set backspace=2
""" 鼠标模式，切换到VISUAL MODE时可以用滚轮上下滚动
set mouse=v

""" 自定义一些高亮关键字
autocmd Syntax * call matchadd('Todo', '\W\zs\(TODO\|FIXME\|NOTICE\|WARN\)')
autocmd Syntax * call matchadd('Todo', '\W\zs\(CHEFTODO\|CHEFFIXME\|CHEFERASEME\|CHEFTMP\)')
autocmd Syntax * call matchadd('Todo', '\W\zs\(@file\|@deps\|@platform\|@author\|@desc\|@brief\|@function\|@param\|@return\|@notice\)')

""" 根据文件类型自动插入文件头部
function HeaderPython()
    call setline(1, "#!/usr/bin/env python")
    call  append(1, "# -*- coding: utf-8 -*-")
    call  append(2, "# @file   ".expand("%"))
    call  append(3, "# @author")
    call  append(4, "#   chef <191201771@qq.com>")
    call  append(5, "#     -created ".strftime("%Y-%m-%d %H:%M:%S"))
    call  append(6, "#     -initial release xxxx-xx-xx")
    call  append(7, "# @brief")
    call  append(8, "#   xxx")
    normal G
    normal o
endf
autocmd bufnewfile *.py call HeaderPython()

function HeaderBash()
    call setline(1, "#!/usr/bin/env bash")
    call  append(1, "# @file   ".expand("%"))
    call  append(2, "# @author")
    call  append(3, "#   chef <191201771@qq.com>")
    call  append(4, "#     -created ".strftime("%Y-%m-%d %H:%M:%S"))
    call  append(5, "#     -initial release xxxx-xx-xx")
    call  append(6, "# @brief")
    call  append(7, "#   xxx")
    normal G
    normal o
endf
autocmd bufnewfile *.sh call HeaderBash()

function HeaderCpp()
    call setline(1,  "/**")
    call  append(1,  " * @file     ".expand("%")."/xxx")
    call  append(2,  " * @deps     xxx")
    call  append(3,  " * @platform xxx/xxx/xxx")
    call  append(4,  " *")
    call  append(5,  " * @author")
    call  append(6,  " *   chef <191201771@qq.com>")
    call  append(7,  " *     -created ".strftime("%Y-%m-%d %H:%M:%S"))
    call  append(8,  " *     -initial release xxxx-xx-xx")
    call  append(9,  " *")
    call  append(10, " * @brief    xxx")

    normal G
    normal o
endf
autocmd bufnewfile *.h,*.hpp call HeaderCpp()

"function Cpp()
"    call setline(1, "/**")
"    call  append(1, " * @file   ".expand("%"))
"    call  append(2, " * @author")
"    call  append(3, " *   chef <191201771@qq.com>")
"    call  append(4, " *     -created ".strftime("%Y-%m-%d %H:%M:%S"))
"    call  append(5, " *     -initial release xxxx-xx-xx")
"    call  append(6, " *")
"    call  append(7, " */")
"
"    normal G
"    normal o
"endf
"autocmd bufnewfile *.c,*.cc,*.cpp,*.go call Cpp()

"python with virtualenv support
py << EOF
import os
import sys
if 'VIRTUAL_ENV' in os.environ:
  project_base_dir = os.environ['VIRTUAL_ENV']
  activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')
  execfile(activate_this, dict(__file__=activate_this))
EOF

"autocmd BufWritePost *.py call Flake8()
